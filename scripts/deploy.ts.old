import { task } from 'hardhat/config'

import { parseEther } from 'ethers'
// const ownerPrivateKey = '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80' // 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266

// hardhat deploy --network coq --token 0x13D91374CcB046ca0B66688AdCe4B2B62837A86a --pubkey 0xe184aF3b0b9CeFf9C2d11B1D33FF31Cc483C13F2
// hardhat deploy --network dev
task('deploy', 'deploy contract')
  .addParam('pubkey', 'paymaster public key', '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', undefined)
  .addParam('token', 'token of other chain', '', undefined, true)
  .setAction(async (taskArgs, hre) => {
    const ethers = hre.ethers
    const upgrades = hre.upgrades
    const pubkey: string = taskArgs.pubkey
    let token: string = taskArgs.token
    if (hre.network.name === 'dev') {
      const MyToken = await ethers.getContractFactory('MyToken')
      const mytoken = await MyToken.deploy('my token', 'MT')
      token = await mytoken.getAddress()
    }

    if (!hre.ethers.isAddress(token)) {
      console.log('invalid token')
    } else {
      // -------------------- deploy entrypoint ---------------------
      // deploy sender creator
      const SenderCreator = await ethers.getContractFactory('SenderCreator')
      const senderCreator = await SenderCreator.deploy()
      const senderCreatorAddress = await senderCreator.getAddress()

      // deploy entrypoint
      const EntryPointFactory = await ethers.getContractFactory('EntryPoint')
      const entryPointProxy = await upgrades.deployProxy(
        EntryPointFactory,
        [senderCreatorAddress],
        {
          initializer: 'initialize'
        }
      )
      const entryPointProxyAddr = await entryPointProxy.getAddress()
      console.log(`entry point address    : ${entryPointProxyAddr}`)

      // -------------------- deploy simple account ---------------------
      // deploy simple account
      const SimpleAccount = await ethers.getContractFactory('SimpleAccount')
      const simpleAccount = await SimpleAccount.deploy(entryPointProxyAddr)
      const simpleAccountAddress = await simpleAccount.getAddress()

      // deploy simple account factory
      const SimpleAccountFactoryFactory = await ethers.getContractFactory('SimpleAccountFactory')
      const simpleAccountFactoryProxy = await upgrades.deployProxy(
        SimpleAccountFactoryFactory,
        [simpleAccountAddress],
        {
          initializer: 'initialize'
        }
      )
      const simpleAccountFactoryProxyAddr = await simpleAccountFactoryProxy.getAddress()
      console.log(`simple account factory : ${simpleAccountFactoryProxyAddr}`)

      console.log('erc20 token            :', token)

      // -------------------- deploy token paymster ---------------------
      const owner = (await ethers.getSigners())[0].address
      const SimpleTokenPaymaster = await ethers.getContractFactory('SimpleTokenPaymaster')
      const simpleTokenPaymaster = await upgrades.deployProxy(
        SimpleTokenPaymaster,
        [entryPointProxyAddr, token, owner, pubkey, parseEther('0.01')],
        {
          initializer: 'initialize'
        }
      )
      const simpleTokenPaymasterProxyAddr = await simpleTokenPaymaster.getAddress()
      console.log(`simple token paymaster : ${simpleTokenPaymasterProxyAddr}`)

      // -------------------- deploy GnosisSafeProxyFactory ---------------------
      const GnosisSafeProxyFactory = await ethers.getContractFactory('GnosisSafeProxyFactory')
      const gnosisSafeProxyFactoryProxy = await GnosisSafeProxyFactory.deploy()
      const gnosisSafeProxyAddress = await gnosisSafeProxyFactoryProxy.getAddress()

      // deploy GnosisSafe
      const GnosisSafeFactory = await ethers.getContractFactory('GnosisSafeL2')
      const gnosisSafeFactoryProxy = await GnosisSafeFactory.deploy()
      const gnosisSafeAddress = await gnosisSafeFactoryProxy.getAddress()

      //
      // deploy sender creator
      const EIP4337ManagerFactory = await ethers.getContractFactory('EIP4337Manager')
      const eIP4337ManagerFactoryProxy = await EIP4337ManagerFactory.deploy(entryPointProxyAddr)
      const eip4337MgrAddress = await eIP4337ManagerFactoryProxy.getAddress()

      // deploy GnosisSafeAccountFactory
      const GnosisSafeAccountFactory = await ethers.getContractFactory('GnosisSafeAccountFactory')
      const gnosisSafeAccountFactoryProxy = await upgrades.deployProxy(
        GnosisSafeAccountFactory,
        [gnosisSafeProxyAddress, gnosisSafeAddress, eip4337MgrAddress],
        {
          initializer: 'initialize'
        }
      )
      const gnosisSafeAccountFactoryProxyAddress = await gnosisSafeAccountFactoryProxy.getAddress()

      console.log(`gnosis factory         : ${gnosisSafeAccountFactoryProxyAddress}`)

      // -------------------- deploy SubsidyPaymaster ---------------------
      const SubsidyPaymaster = await ethers.getContractFactory('SubsidyPaymaster')
      const subsidyPaymaster = await upgrades.deployProxy(
        SubsidyPaymaster,
        [entryPointProxyAddr, owner, pubkey],
        {
          initializer: 'initialize'
        }
      )
      const subsidyPaymasterAddr = await subsidyPaymaster.getAddress()
      console.log(`subsidy paymaster      : ${subsidyPaymasterAddr}`)

      /// --------------------- verify contract -------------------------

      await hre.run('verify:verify', {
        address: senderCreatorAddress,
        constructorArguments: [],
        contract: 'contracts/core/SenderCreator.sol:SenderCreator'
      })

      const entrypoinyImpl = await upgrades.erc1967.getImplementationAddress(entryPointProxyAddr)
      await hre.run('verify:verify', {
        address: entrypoinyImpl,
        constructorArguments: [],
        contract: 'contracts/core/EntryPoint.sol:EntryPoint'
      })

      await hre.run('verify:verify', {
        address: simpleAccountAddress,
        constructorArguments: [
          entryPointProxyAddr
        ],
        contract: 'contracts/samples/SimpleAccount.sol:SimpleAccount'
      })

      const simpleAccountFactoryImpl = await upgrades.erc1967.getImplementationAddress(simpleAccountFactoryProxyAddr)
      await hre.run('verify:verify', {
        address: simpleAccountFactoryImpl,
        constructorArguments: [],
        contract: 'contracts/samples/SimpleAccountFactory.sol:SimpleAccountFactory'
      })

      const simpleTokenPaymasterImpl = await upgrades.erc1967.getImplementationAddress(simpleTokenPaymasterProxyAddr)
      await hre.run('verify:verify', {
        address: simpleTokenPaymasterImpl,
        constructorArguments: [],
        contract: 'contracts/samples/paymaster/SimpleTokenPaymaster.sol:SimpleTokenPaymaster'
      })

      await hre.run('verify:verify', {
        address: gnosisSafeProxyAddress,
        constructorArguments: [],
        contract: 'lib/@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:GnosisSafeProxyFactory'
      })

      await hre.run('verify:verify', {
        address: gnosisSafeAddress,
        constructorArguments: [],
        contract: 'lib/@gnosis.pm/safe-contracts/contracts/GnosisSafeL2.sol:GnosisSafeL2'
      })

      await hre.run('verify:verify', {
        address: eip4337MgrAddress,
        constructorArguments: [
          gnosisSafeProxyAddress
        ],
        contract: 'contracts/samples/gnosis/EIP4337Manager.sol:EIP4337Manager'
      })

      const impl = await upgrades.erc1967.getImplementationAddress(gnosisSafeAccountFactoryProxyAddress)
      await hre.run('verify:verify', {
        address: impl,
        constructorArguments: [],
        contract: 'contracts/samples/gnosis/GnosisAccountFactory.sol:GnosisSafeAccountFactory'
      })

      const subsidyPaymasterImpl = await upgrades.erc1967.getImplementationAddress(subsidyPaymasterAddr)
      await hre.run('verify:verify', {
        address: subsidyPaymasterImpl,
        constructorArguments: [],
        contract: 'contracts/samples/paymaster/SubsidyPaymaster.sol:SubsidyPaymaster'
      })
    }
  })
